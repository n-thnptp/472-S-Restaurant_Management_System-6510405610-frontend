name: Next.js Production CI/CD
on:
  push:
    branches: [ main ]
jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Lint step is optional and won't fail the build
      - name: Lint
        run: npm run lint || echo "Linting completed with warnings"

      # Generate version
      - name: Generate version
        id: version
        run: |
          VERSION=$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Set lowercase repository name
      - name: Set lowercase repository name
        id: repo-name
        run: echo "REPO_NAME=$(echo ${{ github.event.repository.name }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      # Login to Docker Hub
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      # Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ steps.repo-name.outputs.REPO_NAME }}:latest
            ${{ secrets.DOCKER_USERNAME }}/${{ steps.repo-name.outputs.REPO_NAME }}:${{ steps.version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Create GitHub release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          body: |
            Release Date: ${{ steps.version.outputs.date }}
            
            ## Docker Images
            - `${{ secrets.DOCKER_USERNAME }}/${{ steps.repo-name.outputs.REPO_NAME }}:latest`
            - `${{ secrets.DOCKER_USERNAME }}/${{ steps.repo-name.outputs.REPO_NAME }}:${{ steps.version.outputs.version }}`
            
            ## Changes
            ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}